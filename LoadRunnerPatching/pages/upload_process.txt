import streamlit as st
import os
import shutil
import zipfile
import subprocess
from io import BytesIO

# Get absolute path of the script directory
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
st.write(SCRIPT_DIR)
DT_SCRIPT_PATH = os.path.join(SCRIPT_DIR, "scripts/Dt-LoadRunner-request-tagging.py")

# Define directories
INPUT_DIR = os.path.join(SCRIPT_DIR, "tempScriptsInput")
OUTPUT_DIR = os.path.join(SCRIPT_DIR, "tempScriptsOutput")

# # Hide Streamlit menu, deploy button, and footer
# hide_streamlit_style = """
#     <style>
#         #MainMenu {visibility: hidden;}  
#         footer {visibility: hidden;}  
#         header {visibility: hidden;}  
#     </style>
# """
# st.markdown(hide_streamlit_style, unsafe_allow_html=True)





# Ensure clean directories
os.makedirs(INPUT_DIR, exist_ok=True)
os.makedirs(OUTPUT_DIR, exist_ok=True)

st.title("LoadRunner Script Processor")
st.write("Upload a ZIP file containing LoadRunner script folders, select INSERT/DELETE, and process.")

# File uploader (ZIP only)
uploaded_file = st.file_uploader("Upload ZIP file with LoadRunner scripts", type="zip")

# User selects INSERT or DELETE
action = st.radio("Select action", ("INSERT", "DELETE"))

# Enable checkbox only if INSERT is selected
include_transaction_name = st.checkbox("Include Transaction Name into Page Context", disabled=(action != "INSERT"))

# Convert boolean to "true" or "false" (lowercase string)
include_transaction_flag = "true" if include_transaction_name else "false"


# Create two columns to place buttons side by side
col1, col2 = st.columns([1, 1])

# Process button
with col1:
    process_clicked = st.button("Process Files")

# Placeholder for download button (hidden initially)
download_button_placeholder = col2.empty()

# If Process button is clicked
# If Process button is clicked
if process_clicked:
    if not uploaded_file:
        st.error("Please upload a ZIP file.")
    else:
        with st.spinner("Processing files... Please wait!"):  # Show spinner
            # Simulate a progress bar
            # progress_bar = st.progress(0)
            
            # Clear previous input/output directories
            shutil.rmtree(INPUT_DIR, ignore_errors=True)
            shutil.rmtree(OUTPUT_DIR, ignore_errors=True)
            os.makedirs(INPUT_DIR, exist_ok=True)
            os.makedirs(OUTPUT_DIR, exist_ok=True)

            # progress_bar.progress(10)  # Update progress

            # Save and extract ZIP file
            zip_path = os.path.join(INPUT_DIR, "uploaded_scripts.zip")
            with open(zip_path, "wb") as f:
                f.write(uploaded_file.getbuffer())

            with zipfile.ZipFile(zip_path, "r") as zip_ref:
                zip_ref.extractall(INPUT_DIR)

            # progress_bar.progress(30)  # Update progress

            # Verify extracted folder structure
            extracted_folders = [f for f in os.listdir(INPUT_DIR) if os.path.isdir(os.path.join(INPUT_DIR, f))]
            if not extracted_folders:
                st.error("No valid LoadRunner script folders found in ZIP.")
                st.stop()

            # progress_bar.progress(50)  # Update progress

            # Run LoadRunner patching script
            try:
                st.write (include_transaction_flag)
                result = subprocess.run(
                    ["python", DT_SCRIPT_PATH, INPUT_DIR, action, include_transaction_flag], 
                    capture_output=True, text=True, check=True
                )
                output = result.stdout.replace(INPUT_DIR, "").replace("\\", "/")  
                error_output = result.stderr.replace(INPUT_DIR, "").replace("\\", "/")

                # Show output only if there's an error
                if error_output.strip():
                    st.text_area("Processing Errors", error_output)

            except subprocess.CalledProcessError as e:
                st.error(f"Error while processing: {e}")
                error_output = e.stderr.replace(INPUT_DIR, "").replace("\\", "/")
                st.text_area("Error Details", error_output)
                st.stop()

            # progress_bar.progress(70)  # Update progress

            # Move processed folders
            for folder in extracted_folders:
                src = os.path.join(INPUT_DIR, folder)
                dest = os.path.join(OUTPUT_DIR, folder)
                shutil.move(src, dest)

            # progress_bar.progress(90)  # Update progress

            # Create ZIP of processed files
            zip_buffer = BytesIO()
            with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED) as zipf:
                for root, _, files in os.walk(OUTPUT_DIR):
                    for file in files:
                        file_path = os.path.join(root, file)
                        zipf.write(file_path, os.path.relpath(file_path, OUTPUT_DIR))

            # progress_bar.progress(100)  # Complete progress

            st.toast("Processing complete!", icon="âœ…")  # Alert-like notification

            # Show success alert
            st.success("Processing complete!")

            # Show download button next to Process Files
            with col2:
                download_button_placeholder.download_button(
                    label="Download Processed Scripts",
                    data=zip_buffer.getvalue(),
                    file_name="patched_loadrunner_scripts.zip",
                    mime="application/zip",
                    key="download_button"
                )

# Custom styling for buttons
st.markdown(
    """
    <style>
    div.stButton > button:first-child {
        background-color: #007BFF !important; /* Blue button */
        color: white !important;
        font-size: 16px !important;
        padding: 10px 24px !important;
        border-radius: 5px !important;
        border: none !important;
        cursor: pointer !important;
    }
    div.stButton > button:first-child:hover {
        background-color: #0056b3 !important;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# custom_css = """
# <style>
#     [data-testid="stVerticalBlockBorderWrapper"] {
#         margin-top: -50px !important;
#     }
# </style>
# """

# # Inject the CSS into the app
# st.markdown(custom_css, unsafe_allow_html=True)
