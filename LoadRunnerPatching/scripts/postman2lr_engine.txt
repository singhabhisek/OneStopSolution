import json
from urllib.parse import urlparse
import os
import sys

def get_postman(path):
    """Load the Postman collection JSON file."""
    with open(path, 'r', encoding='UTF-8') as postman_f:
        return json.load(postman_f)

# Read input parameters from command line
input_file = sys.argv[1]  # JSON file provided directly
output_folder = sys.argv[2]  # Output directory
output_file_path = os.path.join(output_folder, os.path.splitext(os.path.basename(input_file))[0] + ".txt")

# Load Postman JSON data
data = get_postman(input_file)
requests_list = []

# Flatten nested Postman collections
for item in data.get('item', []):
    if 'item' in item:
        requests_list.extend(item['item'])  # Nested requests
    else:
        requests_list.append(item)

# LoadRunner Templates
c_web_set_user = """
    web_set_user("my_uname",
    "my_pwd",
    "my_url:my_port");
    """

c_web_header = """
    web_add_header("my_key",
    "my_value");
    """

c_get_request = """
    web_url("request_name",
            "URL=request_url",
            "Resource=0",
            "RecContentType=application/json",
            "Referer=",
            "Snapshot=snapshot_number.inf",
            "Mode=HTML",
            LAST);
    """

c_post_request = """
    web_custom_request("request_name",
        "URL=request_url",
        "Method=POST",
        "Resource=0",
        "RecContentType=request_content_type",
        "Referer=",
        "Snapshot=snapshot_number.inf",
        "Mode=HTML",
        "EncType=request_enc_type",
        "Body=request_body",
        LAST);
    """

# Process requests and generate LoadRunner script
with open(output_file_path, 'w', encoding='UTF-8') as output_file:
    request_counter = 0

    for request in requests_list:
        request_counter += 1
        web_header_code = ""
        web_set_user_code = ""
        get_request_code = ""
        post_request_code = ""

        # Process Authentication
        auth = request["request"].get("auth", {})
        parsed_url = urlparse(request["request"]["url"]["raw"])

        if auth.get("type") == "basic":
            uname, pwd = "", ""
            for entry in auth.get("basic", []):
                if entry["key"] == "username":
                    uname = entry["value"]
                elif entry["key"] == "password":
                    pwd = entry["value"]
            
            web_set_user_code = c_web_set_user.replace("my_uname", uname)\
                                              .replace("my_pwd", pwd)\
                                              .replace("my_url", parsed_url.netloc)\
                                              .replace("my_port", "443" if parsed_url.scheme == "https" else "80")

            output_file.write(web_set_user_code + "\n")

        elif auth.get("type") == "bearer":
            token = auth["bearer"][0]["value"]
            web_header_code = c_web_header.replace("my_key", "Authorization").replace("my_value", f"Bearer {token}")
            output_file.write(web_header_code + "\n")

        elif auth.get("type") == "apikey":
            key = auth["apikey"][1]["value"]
            value = auth["apikey"][0]["value"]
            web_header_code = c_web_header.replace("my_key", key).replace("my_value", value)
            output_file.write(web_header_code + "\n")

        # Process Headers
        for header in request["request"].get("header", []):
            web_header_code = c_web_header.replace("my_key", header["key"]).replace("my_value", header["value"])
            output_file.write(web_header_code + "\n")

        # Process GET Requests
        if request["request"]["method"] == "GET":
            get_request_code = c_get_request.replace("request_name", request["name"])\
                                            .replace("request_url", request["request"]["url"]["raw"])\
                                            .replace("snapshot_number", f"t{request_counter}")

            output_file.write(f'   lr_start_transaction("{request["name"]}");\n')
            output_file.write(get_request_code + "\n")
            output_file.write(f'   lr_end_transaction("{request["name"]}", LR_AUTO);\n\n')

        # Process POST Requests
        elif request["request"]["method"] == "POST":
            content_type = next((h["value"] for h in request["request"].get("header", []) if h["key"].lower() == "content-type"), "application/json")
            enc_type = "application/json" if "json" in content_type.lower() else "text/xml"

            body_data = request["request"].get("body", {}).get("raw", "").replace("\r\n", "").replace("\"", '\\\"')

            post_request_code = c_post_request.replace("request_name", request["name"])\
                                              .replace("request_url", request["request"]["url"]["raw"])\
                                              .replace("snapshot_number", f"t{request_counter}")\
                                              .replace("request_content_type", content_type)\
                                              .replace("request_enc_type", enc_type)\
                                              .replace("request_body", body_data)

            output_file.write(f'   lr_start_transaction("{request["name"]}");\n')
            output_file.write(post_request_code + "\n")
            output_file.write(f'   lr_end_transaction("{request["name"]}", LR_AUTO);\n\n')

print(f"Processing complete. Output saved at: {output_file_path}")
